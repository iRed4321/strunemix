/// Trait implemented automatically on enums names generated by strunemix.
pub trait StrunemixName
where 
    Self: Sized + std::str::FromStr
{

    /// Get the name of the enum value as a string slice
    /// 
    /// ```rust
    /// use strunemix::*;
    /// 
    /// #[derive(Default, Strunemix)]
    /// struct Person {
    ///    age: i32,
    ///    name: Option<String>,
    /// }
    /// 
    /// let age = PersonAttrName::Age;
    /// 
    /// assert_eq!(age.name(), "age");
    /// ```
    fn name(&self) -> &'static str {
        panic!("This function should be implemented by the derive macro")
    }

    /// Get an enum value by its name
    /// 
    /// ```rust
    /// use strunemix::*;
    /// 
    /// #[derive(Default, Strunemix)]
    /// struct Person {
    ///   age: i32,
    ///   name: Option<String>,
    /// }
    /// 
    /// let age = PersonAttrName::from_str("age").unwrap();
    /// 
    /// assert_eq!(age, PersonAttrName::Age);
    fn from_str(name: &str) -> Option<Self> {
        <Self as std::str::FromStr>::from_str(name).ok()
    }

}